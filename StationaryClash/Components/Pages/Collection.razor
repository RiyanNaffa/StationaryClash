@page "/collection"
@rendermode InteractiveServer
@using StationaryClash.Models
@inject Interfaces.Repositories.IInventoryRepository InventoryRepository
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager NavigationManager

<style>
    body {
        background: #71C5E8;
        margin: 0;
        font-family: "VT323", serif;
    }
</style>

<h3 style="font-size:40px">Inventory</h3>

@if (isRedirecting)
{
    <p>Redirecting to login...</p>
}
else if (itemList == null)
{
    <p>Loading inventory...</p>
}
else if (!itemList.Any())
{
    <p>No items found in inventory.</p>
}
else
{
    <table class="table">
        <thead>
            <tr style="font-size:24px;">
                <th>Image</th>
                <th>Character Name</th>
                <th>Rarity</th>
                <th>Duplicates</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in itemList)
            {
                <tr>
                    <td><img src="@item.Image" width="50" /></td>
                    <td style="vertical-align:middle; font-size:20px">@item.Name</td>
                    <td style="vertical-align:middle; ">
                        <img src="/Images/Stars.png" alt="rarity stars" style="width:30px; margin:0px;" />
                        @if (item.Rarity == 2)
                        {
                            <img src="/Images/Stars.png" alt="Rarity Image" style="width:30px; margin-left:7px;" />
                        }
                        @if (item.Rarity == 3)
                        {
                            <img src="/Images/Stars.png" alt="Rarity Image" style="width:30px; margin-left:7px;" />
                            <img src="/Images/Stars.png" alt="Rarity Image" style="width:30px; margin:0px;" />
                        }
                    </td>
                    <td style="vertical-align:middle; font-size:20px">@item.Duplicates</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CollectionItem>? itemList;
    private bool isRedirecting = false;
    private int userId;
    private User? currentUser;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ambil data pengguna dari session storage
            currentUser = await SessionStorage.GetItemAsync<User>("CurrentUser");

            // Jika data tidak ditemukan, redirect ke login
            if (currentUser is null)
            {
                isRedirecting = true;
                StateHasChanged();
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                await GetUserId();
                itemList = await InventoryRepository.LoadInventory(userId);
                StateHasChanged();
            }
        }
    }

    private async Task GetUserId()
    {
        currentUser = await SessionStorage.GetItemAsync<User>("CurrentUser");
        userId = currentUser.ID;    
    }
}